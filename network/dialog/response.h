#ifndef RESPONSE_H_
#define RESPONSE_H_

#include "requests.h"

/**
 * Represents a HTTP response code
 */
typedef enum HTTPResponseCode HTTPResponseCode;
enum HTTPResponseCode {

    // Information
    RESPONSE_INFORMATION_CONTINUE = 100,
    RESPONSE_INFORMATION_SWITCHING_PROTOCOLS = 101,
    RESPONSE_INFORMATION_PROCESSING = 102,
    RESPONSE_INFORMATION_EARLY_HINTS = 103,

    // Success
    RESPONSE_SUCCESS_OK = 200,
    RESPONSE_SUCCESS_CREATED = 201,
    RESPONSE_SUCCESS_ACCEPTED = 202,
    RESPONSE_SUCCESS_NON_AUTHORITATIVE_INFORMATION = 203,
    RESPONSE_SUCCESS_NO_CONTENT = 204,
    RESPONSE_SUCCESS_RESET_CONTENT = 205,
    RESPONSE_SUCCESS_PARTIAL_CONTENT = 206,
    RESPONSE_SUCCESS_MULTI_STATUS = 207,
    RESPONSE_SUCCESS_ALREADY_REPORTED = 208,
    RESPONSE_SUCCESS_CONTENT_DIFFERENT = 210,
    RESPONSE_SUCCESS_IM_USED = 226,

    // Redirection
    RESPONSE_REDIRECT_MULTIPLE_CHOICES = 300,
    RESPONSE_REDIRECT_MOVED_PERMANENTLY = 301,
    RESPONSE_REDIRECT_FOUND = 302,
    RESPONSE_REDIRECT_SEE_OTHER = 303,
    RESPONSE_REDIRECT_NOT_MODIFIED = 304,
    RESPONSE_REDIRECT_USE_PROXY = 305,
    RESPONSE_REDIRECT_USE_PROXY_LEGACY = 306,
    RESPONSE_REDIRECT_TEMPORARY_REDIRECT = 307,
    RESPONSE_REDIRECT_PERMANENT_REDIRECT = 308,
    RESPONSE_REDIRECT_TOO_MANY_REDIRECTS = 310,

    // HTTP Client errors
    RESPONSE_CLIENT_ERROR_BAD_REQUEST = 400,
    RESPONSE_CLIENT_ERROR_UNAUTHORIZED = 401,
    RESPONSE_CLIENT_ERROR_PAYMENT_REQUIRED = 402,
    RESPONSE_CLIENT_ERROR_FORBIDDEN = 403,
    RESPONSE_CLIENT_ERROR_NOT_FOUND = 404,
    RESPONSE_CLIENT_ERROR_METHOD_NOT_ALLOWED = 405,
    RESPONSE_CLIENT_ERROR_NOT_ACCEPTABLE = 406,
    RESPONSE_CLIENT_ERROR_PROXY_AUTH_REQUIRED = 407,
    RESPONSE_CLIENT_ERROR_REQUEST_TIME_OUT = 408,
    RESPONSE_CLIENT_ERROR_CONFLICT = 409,
    RESPONSE_CLIENT_ERROR_GONE = 410,
    RESPONSE_CLIENT_ERROR_LENGTH_REQUIRED = 411,
    RESPONSE_CLIENT_ERROR_PRECONDITION_FAILED = 412,
    RESPONSE_CLIENT_ERROR_REQUEST_ENTITY_TOO_LARGE = 413,
    RESPONSE_CLIENT_ERROR_REQUEST_URI_TOO_LONG = 414,
    RESPONSE_CLIENT_ERROR_UNSUPPORTED_MEDIA_TYPE = 415,
    RESPONSE_CLIENT_ERROR_REQUEST_RANGE_UNSATISFIABLE = 416,
    RESPONSE_CLIENT_ERROR_EXPECTATION_FAILED = 417,
    RESPONSE_CLIENT_ERROR_IM_A_TEAPOT = 418,
    RESPONSE_CLIENT_ERROR_PAGE_EXPIRED = 419,
    RESPONSE_CLIENT_ERROR_BAD_MAPPING_OR_MISDIRECTED_REQUEST = 421,
    RESPONSE_CLIENT_ERROR_UNPROCESSABLE_ENTITY = 422,
    RESPONSE_CLIENT_ERROR_LOCKED = 423,
    RESPONSE_CLIENT_ERROR_METHOD_FAILURE = 424,
    RESPONSE_CLIENT_ERROR_TOO_EARLY = 425,
    RESPONSE_CLIENT_ERROR_UPGRADE_REQUIRED = 426,
    RESPONSE_CLIENT_ERROR_INVALID_DIGITAL_SIGNATURE = 427,
    RESPONSE_CLIENT_ERROR_PRECONDITION_REQUIRED = 428,
    RESPONSE_CLIENT_ERROR_TOO_MANY_REQUESTS = 429,
    RESPONSE_CLIENT_ERROR_REQUEST_HEADER_FIELDS_TOO_LARGE = 431,
    RESPONSE_CLIENT_ERROR_RETRY_WITH = 449,
    RESPONSE_CLIENT_ERROR_BLOCKED_BY_WINDOWS_PARENTAL_CONTROL = 450,
    RESPONSE_CLIENT_ERROR_UNAVAILABLE_FOR_LEGAL_REASONS = 451,
    RESPONSE_CLIENT_ERROR_UNRECOVERABLE_ERROR = 456,

    // Nginx 4xx HTTP Extended Codes
    NGINX_NO_RESPONSE = 444,
    NGINX_SSL_CERTIFICATE_ERROR = 495,
    NGINX_SSL_CERTIFICATE_REQUIRED = 496,
    NGINX_HTTP_REQ_SENT_TO_HTTPS_PORT = 497,
    NGINX_TOKEN_EXPIRED_OR_INVALID = 498,
    NGINX_CLIENT_CLOSED_REQUEST = 499,

    // 5xx : Server errors or app errors
    RESPONSE_SERVER_ERROR_INTERNAL_SERVER_ERROR = 500,
    RESPONSE_SERVER_ERROR_NOT_IMPLEMENTED = 501,
    RESPONSE_SERVER_ERROR_BAD_GATEWAY_OR_PROXY_ERROR = 502,
    RESPONSE_SERVER_ERROR_SERVICE_UNAVAILABLE = 503,
    RESPONSE_SERVER_ERROR_GATEWAY_TIME_OUT = 504,
    RESPONSE_SERVER_ERROR_HTTP_VERSION_NOT_SUPPORTED = 505,
    RESPONSE_SERVER_ERROR_VARIANT_ALSO_NEGOTIATES = 506,
    RESPONSE_SERVER_ERROR_INSUFFICIENT_STORAGE = 507,
    RESPONSE_SERVER_ERROR_LOOP_DETECTED = 508,
    RESPONSE_SERVER_ERROR_BANDWIDTH_LIMIT_EXCEEDED = 509,
    RESPONSE_SERVER_ERROR_NOT_EXTENDED = 510,
    RESPONSE_SERVER_ERROR_NETWORK_AUTH_REQUIRED = 511,

    // Cloudflare 5xx Extended Codes
    CLOUDFLARE_UNKNOWN_ERROR = 520,
    CLOUDFLARE_WEB_SERVER_IS_DOWN = 521,
    CLOUDFLARE_CONNECTION_TIMED_OUT = 522,
    CLOUDFLARE_ORIGIN_IS_UNREACHABLE = 523,
    CLOUDFLARE_A_TIMEOUT_OCCURRED = 524,
    CLOUDFLARE_SSL_HANDSHAKE_FAILED = 525,
    CLOUDFLARE_INVALID_SSL_CERTIFICATE = 526,
    CLOUDFLARE_RAILGUN_ERROR = 527
};

char* HTTPResponseCodeToStr(HTTPResponseCode code);

/**
 * Represents a MIME content type, see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
 */
typedef enum MIMEContentType MIMEContentType;
enum MIMEContentType {
    CONTENT_TYPE_UNKNOWN,

    CONTENT_TYPE_TEXT_PLAIN,
    CONTENT_TYPE_TEXT_HTML,
    CONTENT_TYPE_TEXT_CSS,
    CONTENT_TYPE_TEXT_CSV,
    CONTENT_TYPE_TEXT_CALENDAR,

    CONTENT_TYPE_FONT_OTF,
    CONTENT_TYPE_FONT_TTF,
    CONTENT_TYPE_FONT_WOFF,
    CONTENT_TYPE_FONT_WOFF2,

    CONTENT_TYPE_IMAGE_BMP,
    CONTENT_TYPE_IMAGE_GIF,
    CONTENT_TYPE_IMAGE_X_ICON,
    CONTENT_TYPE_IMAGE_JPEG,
    CONTENT_TYPE_IMAGE_PNG,
    CONTENT_TYPE_IMAGE_SVG_XML,
    CONTENT_TYPE_IMAGE_TIFF,
    CONTENT_TYPE_IMAGE_WEBP,

    CONTENT_TYPE_AUDIO_AAC,
    CONTENT_TYPE_AUDIO_MIDI,
    CONTENT_TYPE_AUDIO_OGG,
    CONTENT_TYPE_AUDIO_X_WAV,
    CONTENT_TYPE_AUDIO_WEBM,

    CONTENT_TYPE_VIDEO_X_MSVIDEO,
    CONTENT_TYPE_VIDEO_MPEG,
    CONTENT_TYPE_VIDEO_OGG,
    CONTENT_TYPE_VIDEO_WEBM,
    CONTENT_TYPE_VIDEO_3GPP,
    CONTENT_TYPE_VIDEO_3GPP2,

    CONTENT_TYPE_APPLICATION_ABIWORD,
    CONTENT_TYPE_APPLICATION_OCTET_STREAM,
    CONTENT_TYPE_APPLICATION_VND_AMAZON_EBOOK,
    CONTENT_TYPE_APPLICATION_X_BZIP,
    CONTENT_TYPE_APPLICATION_X_BZIP2,
    CONTENT_TYPE_APPLICATION_X_CSH,
    CONTENT_TYPE_APPLICATION_MSWORD,
    CONTENT_TYPE_APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT,
    CONTENT_TYPE_APPLICATION_VND_MS_FONT_OBJECT,
    CONTENT_TYPE_APPLICATION_EPUB_ZIP,
    CONTENT_TYPE_APPLICATION_JAVA_ARCHIVE,
    CONTENT_TYPE_APPLICATION_JAVASCRIPT,
    CONTENT_TYPE_APPLICATION_TYPESCRIPT,
    CONTENT_TYPE_APPLICATION_JSON,
    CONTENT_TYPE_APPLICATION_VND_APPLE_INSTALLER_XML,
    CONTENT_TYPE_APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION,
    CONTENT_TYPE_APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET,
    CONTENT_TYPE_APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT,
    CONTENT_TYPE_APPLICATION_OGG,
    CONTENT_TYPE_APPLICATION_PDF,
    CONTENT_TYPE_APPLICATION_VND_MS_POWERPOINT,
    CONTENT_TYPE_APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION,
    CONTENT_TYPE_APPLICATION_X_RAR_COMPRESSED,
    CONTENT_TYPE_APPLICATION_RTF,
    CONTENT_TYPE_APPLICATION_X_SH,
    CONTENT_TYPE_APPLICATION_X_SHOCKWAVE_FLASH,
    CONTENT_TYPE_APPLICATION_X_TAR,
    CONTENT_TYPE_APPLICATION_VND_VISIO,
    CONTENT_TYPE_APPLICATION_XHTML_XML,
    CONTENT_TYPE_APPLICATION_VND_MS_EXCEL,
    CONTENT_TYPE_APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET,
    CONTENT_TYPE_APPLICATION_XML,
    CONTENT_TYPE_APPLICATION_VND_MOZILLA_XUL_XML,
    CONTENT_TYPE_APPLICATION_ZIP,
    CONTENT_TYPE_APPLICATION_X_7Z_COMPRESSED,

    CONTENT_TYPE_MAX_LENGTH
};

/**
 * Represents a HTTP response
 */
typedef struct HTTPResponse HTTPResponse;
struct HTTPResponse {
    HTTPResponseCode code;
    char * date;
    char * server;
    MIMEContentType contentType;
    char * expires;
    char * lastModified;
    char * body;
    ssize_t contentLength;
};

/**
 * Builds a HTTP response from a request and a content root directory
 * @param rootDirectory the full path to the root directory
 * @param request_txt the request to build the response from
 * @return the built response
 */
HTTPResponse buildResponse(char * rootDirectory, char * request_txt);

/**
 * Converts a HTTP response to a string
 * @param response the response to convert
 * @return the string corresponding to the response
 */
char* responseToStr(HTTPResponse response);

#endif